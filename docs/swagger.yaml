definitions:
  models.User:
    properties:
      department:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      userId:
        type: integer
      userName:
        type: string
      userStatus:
        type: string
    type: object
  models.UserDTO:
    properties:
      department:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      userName:
        type: string
      userStatus:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/users:
    get:
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Create User
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "409":
          description: User Name exists
      tags:
      - users
  /api/users/{userId}:
    delete:
      description: delete a user by user_id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "409":
          description: User Name exists
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update a user
      parameters:
      - description: update user by id
        in: path
        name: userId
        required: true
        type: string
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDTO'
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "409":
          description: User Name exists
      tags:
      - users
swagger: "2.0"
